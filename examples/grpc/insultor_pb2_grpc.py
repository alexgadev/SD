# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import insultor_pb2 as insultor__pb2


class InsultorStub(object):
    """Interface exported by the server
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddInsult = channel.unary_unary(
                '/Insultor/AddInsult',
                request_serializer=insultor__pb2.String.SerializeToString,
                response_deserializer=insultor__pb2.Empty.FromString,
                )
        self.GetInsults = channel.unary_unary(
                '/Insultor/GetInsults',
                request_serializer=insultor__pb2.Empty.SerializeToString,
                response_deserializer=insultor__pb2.Array.FromString,
                )
        self.InsultMe = channel.unary_unary(
                '/Insultor/InsultMe',
                request_serializer=insultor__pb2.Empty.SerializeToString,
                response_deserializer=insultor__pb2.String.FromString,
                )


class InsultorServicer(object):
    """Interface exported by the server
    """

    def AddInsult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInsults(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InsultMe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InsultorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddInsult': grpc.unary_unary_rpc_method_handler(
                    servicer.AddInsult,
                    request_deserializer=insultor__pb2.String.FromString,
                    response_serializer=insultor__pb2.Empty.SerializeToString,
            ),
            'GetInsults': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInsults,
                    request_deserializer=insultor__pb2.Empty.FromString,
                    response_serializer=insultor__pb2.Array.SerializeToString,
            ),
            'InsultMe': grpc.unary_unary_rpc_method_handler(
                    servicer.InsultMe,
                    request_deserializer=insultor__pb2.Empty.FromString,
                    response_serializer=insultor__pb2.String.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Insultor', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Insultor(object):
    """Interface exported by the server
    """

    @staticmethod
    def AddInsult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Insultor/AddInsult',
            insultor__pb2.String.SerializeToString,
            insultor__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetInsults(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Insultor/GetInsults',
            insultor__pb2.Empty.SerializeToString,
            insultor__pb2.Array.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InsultMe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Insultor/InsultMe',
            insultor__pb2.Empty.SerializeToString,
            insultor__pb2.String.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
